
{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters":
    {
        "1 - CognitiveServicesResourceName":
        {
            "type": "String"
        },
        "1 - CognitiveServicesResourceRegion":
        {
            "defaultValue": "centralus",
            "type": "String",
            "allowedValues": [
                "centralus",
                "eastus",
                "eastus2",
                "northcentralus",
                "southcentralus",
                "westcentralus",
                "westus",
                "westus2",
                "canadacentral",
                "brazilsouth",
                "eastasia",
                "southeastasia",
                "australiaeast",
                "centralindia",
                "japaneast",
                "japanwest",
                "koreacentral",
                "northeurope",
                "westeurope",
                "francecentral",
                "uksouth"
            ],
            "metadata":
            {
                "description": "The default cognitive services resource region."
            }
        },
        "1 - CognitiveServicesModelId":
        {
            "defaultValue": "",
            "type": "String"
        },
        "1 - CognitiveServicesRequestPercentage":
        {
            "defaultValue": 20,
            "type": "int"
        },
        "2 - CognitiveServicesResourceName":
        {
            "type": "String"
        },
        "2 - CognitiveServicesResourceRegion":
        {
            "defaultValue": "eastus",
            "type": "String",
            "allowedValues": [
                "centralus",
                "eastus",
                "eastus2",
                "northcentralus",
                "southcentralus",
                "westcentralus",
                "westus",
                "westus2",
                "canadacentral",
                "brazilsouth",
                "eastasia",
                "southeastasia",
                "australiaeast",
                "centralindia",
                "japaneast",
                "japanwest",
                "koreacentral",
                "northeurope",
                "westeurope",
                "francecentral",
                "uksouth"
            ],
            "metadata":
            {
                "description": "The default cognitive services resource region."
            }
        },
        "2 - CognitiveServicesModelId":
        {
            "defaultValue": "",
            "type": "String"
        },
        "2 - CognitiveServicesRequestPercentage":
        {
            "defaultValue": 20,
            "type": "int"
        },
        "3 - CognitiveServicesResourceName":
        {
            "type": "String"
        },
        "3 - CognitiveServicesResourceRegion":
        {
            "defaultValue": "northcentralus",
            "type": "String",
            "allowedValues": [
                "centralus",
                "eastus",
                "eastus2",
                "northcentralus",
                "southcentralus",
                "westcentralus",
                "westus",
                "westus2",
                "canadacentral",
                "brazilsouth",
                "eastasia",
                "southeastasia",
                "australiaeast",
                "centralindia",
                "japaneast",
                "japanwest",
                "koreacentral",
                "northeurope",
                "westeurope",
                "francecentral",
                "uksouth"
            ],
            "metadata":
            {
                "description": "The default cognitive services resource region."
            }
        },
        "3 - CognitiveServicesModelId":
        {
            "defaultValue": "",
            "type": "String"
        },
        "3 - CognitiveServicesRequestPercentage":
        {
            "defaultValue": 20,
            "type": "int"
        },
        "4 - CognitiveServicesResourceName":
        {
            "type": "String"
        },
        "4 - CognitiveServicesResourceRegion":
        {
            "defaultValue": "southcentralus",
            "type": "String",
            "allowedValues": [
                "centralus",
                "eastus",
                "eastus2",
                "northcentralus",
                "southcentralus",
                "westcentralus",
                "westus",
                "westus2",
                "canadacentral",
                "brazilsouth",
                "eastasia",
                "southeastasia",
                "australiaeast",
                "centralindia",
                "japaneast",
                "japanwest",
                "koreacentral",
                "northeurope",
                "westeurope",
                "francecentral",
                "uksouth"
            ],
            "metadata":
            {
                "description": "The default cognitive services resource region."
            }
        },
        "4 - CognitiveServicesModelId":
        {
            "defaultValue": "",
            "type": "String"
        },
        "4 - CognitiveServicesRequestPercentage":
        {
            "defaultValue": 20,
            "type": "int"
        },
        "5 - CognitiveServicesResourceName":
        {
            "type": "String"
        },
        "5 - CognitiveServicesResourceRegion":
        {
            "defaultValue": "westus",
            "type": "String",
            "allowedValues": [
                "centralus",
                "eastus",
                "eastus2",
                "northcentralus",
                "southcentralus",
                "westcentralus",
                "westus",
                "westus2",
                "canadacentral",
                "brazilsouth",
                "eastasia",
                "southeastasia",
                "australiaeast",
                "centralindia",
                "japaneast",
                "japanwest",
                "koreacentral",
                "northeurope",
                "westeurope",
                "francecentral",
                "uksouth"
            ],
            "metadata":
            {
                "description": "The default cognitive services resource region."
            }
        },
        "5 - CognitiveServicesModelId":
        {
            "defaultValue": "",
            "type": "String"
        },
        "5 - CognitiveServicesRequestPercentage":
        {
            "defaultValue": 20,
            "type": "int"
        },
        "TranscriptionLocale":
        {
            "defaultValue": "en-US | English (United States)",
            "type": "String",
            "allowedValues": [
                "ar-BH | Arabic (Bahrain)",
                "ar-EG | Arabic (Egypt)",
                "ar-SY | Arabic (Syria)",
                "ca-ES | Catalan",
                "da-DK | Danish (Denmark)",
                "de-DE | German (Germany)",
                "en-AU | English (Australia)",
                "en-CA | English (Canada)",
                "en-GB | English (United Kingdom)",
                "en-IN | English (India)",
                "en-NZ | English (New Zealand)",
                "en-US | English (United States)",
                "es-ES | Spanish (Spain)",
                "es-MX | Spanish (Mexico)",
                "fi-FI | Finnish (Finland)",
                "fr-CA | French (Canada)",
                "fr-FR | French (France)",
                "gu-IN | Gujarati (Indian)",
                "hi-IN | Hindi (India)",
                "it-IT | Italian (Italy)",
                "ja-JP | Japanese (Japan)",
                "ko-KR | Korean (Korea)",
                "mr-IN | Marathi (India)",
                "nb-NO | Norwegian (Bokm√•l)",
                "nl-NL | Dutch (Netherlands)",
                "pl-PL | Polish (Poland)",
                "pt-BR | Portuguese (Brazil)",
                "pt-PT | Portuguese (Portugal)",
                "ru-RU | Russian (Russia)",
                "sv-SE | Swedish (Sweden)",
                "ta-IN | Tamil (India)",
                "te-IN | Telugu (India)",
                "th-TH | Thai (Thailand)",
                "tr-TR | Turkish (Turkey)",
                "zh-CN | Chinese (Mandarin, simplified)",
                "zh-HK | Chinese (Cantonese, Traditional)",
                "zh-TW | Chinese (Taiwanese Mandarin)"
            ]
        },
        "ProfanityFilterMode":
        {
            "defaultValue": "None",
            "type": "String",
            "allowedValues": [
                "None",
                "Removed",
                "Tags",
                "Masked"
            ],
            "metadata":
            {
                "description": "The requested profanity filter mode."
            }
        },
        "PunctuationMode":
        {
            "defaultValue": "DictatedAndAutomatic",
            "type": "String",
            "allowedValues": [
                "None",
                "Dictated",
                "Automatic",
                "DictatedAndAutomatic"
            ],
            "metadata":
            {
                "description": "The requested punctuation mode."
            }
        },
        "AddDiarization":
        {
            "defaultValue": false,
            "type": "bool",
            "metadata":
            {
                "description": "A value indicating whether diarization (speaker separation) is requested."
            }
        },
        "AddWordLevelTimestamps":
        {
            "defaultValue": false,
            "type": "bool",
            "metadata":
            {
                "description": "A value indicating whether word level timestamps are requested."
            }
        },
        "CustomProperties":
        {
            "defaultValue": "",
            "type": "String",
            "metadata":
            {
                "description": "The custom properties as json (like {\"Key1\": \"Value1\", \"Key2\": \"Value2\"}). No nested properties allowed."
            }
        },
        "ClientId":
        {
            "type": "SecureString"
        },
        "ClientSecret":
        {
            "type": "SecureString"
        },
        "TokenEndpointUrl":
        {
            "type": "String"
        },
        "Scope":
        {
            "type": "String"
        },
        "CallbackBaseUrl":
        {
            "type": "String"
        },
        "StorageResourceName":
        {
            "type": "String"
        },
        "StorageResourceRegion":
        {
            "defaultValue": "eastus",
            "type": "String",
            "allowedValues": [
                "centralus",
                "eastus",
                "eastus2",
                "northcentralus",
                "southcentralus",
                "westcentralus",
                "westus",
                "westus2",
                "canadacentral",
                "brazilsouth",
                "eastasia",
                "southeastasia",
                "australiaeast",
                "centralindia",
                "japaneast",
                "japanwest",
                "koreacentral",
                "northeurope",
                "westeurope",
                "francecentral",
                "uksouth"
            ],
            "metadata":
            {
                "description": "The storage resource region."
            }
        },
        "AppInsightsResourceName":
        {
            "type": "String"
        },
        "AppServicePlanResourceName":
        {
            "type": "String"
        },
        "EventGridResourceName":
        {
            "type": "String"
        },
        "KeyVaultResourceName":
        {
            "type": "String"
        },
        "ServiceBusResourceName":
        {
            "type": "String"
        },
        "AudioUploadedFunctionResourceName":
        {
            "type": "String"
        },
        "ResultUploadedFunctionResourceName":
        {
            "type": "String"
        }
    },
    "variables":
    {
        "sku": "S0",
        "tagValues": {},
        "storageSkuType": "Standard_LRS",
        "storageKind": "StorageV2",
        "builtInRoleType": "Contributor",
        "virtualNetworkType": "None",
        "vnet": {},
        "ipRules": [],
        "1 - RoleAssignmentGuid": "[guid(resourceGroup().id, deployment().name, '1')]",
        "2 - RoleAssignmentGuid": "[guid(resourceGroup().id, deployment().name, '2')]",
        "3 - RoleAssignmentGuid": "[guid(resourceGroup().id, deployment().name, '3')]",
        "4 - RoleAssignmentGuid": "[guid(resourceGroup().id, deployment().name, '4')]",
        "5 - RoleAssignmentGuid": "[guid(resourceGroup().id, deployment().name, '5')]",
        "StorageAccountContributorGuid": "ba92f5b4-2d11-453d-a403-e96b0029c9fe",
        "Contributor": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', variables('StorageAccountContributorGuid'))]",
        "vnetProperties":
        {
            "publicNetworkAccess": "[if(equals(variables('virtualNetworkType'), 'Internal'), 'Disabled', 'Enabled')]",
            "networkAcls":
            {
                "defaultAction": "[if(equals(variables('virtualNetworkType'), 'External'), 'Deny', 'Allow')]",
                "virtualNetworkRules": "[if(equals(variables('virtualNetworkType'), 'External'), json(concat('[{\"id\": \"', concat(subscription().id, '/resourceGroups/', variables('vnet').resourceGroup, '/providers/Microsoft.Network/virtualNetworks/', variables('vnet').name, '/subnets/', variables('vnet').subnets.subnet.name), '\"}]')), json('[]'))]",
                "ipRules": "[if(or(empty(variables('ipRules')), empty(variables('ipRules')[0].value)), json('[]'), variables('ipRules'))]"
            }
        },
        "vnetPropertiesByos":
        {
            "publicNetworkAccess": "[if(equals(variables('virtualNetworkType'), 'Internal'), 'Disabled', 'Enabled')]",
            "networkAcls":
            {
                "defaultAction": "[if(equals(variables('virtualNetworkType'), 'External'), 'Deny', 'Allow')]",
                "virtualNetworkRules": "[if(equals(variables('virtualNetworkType'), 'External'), json(concat('[{\"id\": \"', concat(subscription().id, '/resourceGroups/', variables('vnet').resourceGroup, '/providers/Microsoft.Network/virtualNetworks/', variables('vnet').name, '/subnets/', variables('vnet').subnets.subnet.name), '\"}]')), json('[]'))]",
                "ipRules": "[if(or(empty(variables('ipRules')), empty(variables('ipRules')[0].value)), json('[]'), variables('ipRules'))]"
            },
            "userOwnedStorage": "[if(not(empty(parameters('StorageResourceName'))), createArray(json(concat('{\"resourceId\": \"',concat(subscription().id,'/resourcegroups/', resourceGroup().name, '/providers/Microsoft.Storage/storageAccounts/', parameters('StorageResourceName'), '\"}')))), json('[]'))]"
        },
        "AppInsightsName": "[parameters('AppInsightsResourceName')]",
        "ServiceBusName": "[parameters('ServiceBusResourceName')]",
        "IngestionClientRegion": "[resourceGroup().location]",
        "AppServicePlanName": "[parameters('AppServicePlanResourceName')]",
        "KeyVaultName": "[parameters('KeyVaultResourceName')]",
        "CustomProperties": "[parameters('CustomProperties')]",
        "CognitiveServicesKeysSecretName": "CognitiveServicesKeys",
        "ClientIdSecretName": "ClientId",
        "ClientSecretSecretName": "ClientSecret",
        "AudioInputContainer": "audio-input",
        "AudioProcessedContainer": "audio-processed",
        "AudioFailedContainer": "audio-failed",
        "JsonResultOutputContainer": "json-result-output",
        "ErrorReportOutputContainer": "error-report",
        "SpeechServicesOutputContainer": "customspeech-artifacts",
        "EventGridSystemTopicName": "[parameters('EventGridResourceName')]",
        "AudioUploadedQueueName": "audio_uploaded_queue",
        "AudioUploadedEventName": "AudioUploaded",
        "ResultUploadedQueueName": "result_uploaded_queue",
        "ResultUploadedEventName": "ResultUploaded",
        "IngestionClientAudioUploadedFunctionName": "[parameters('AudioUploadedFunctionResourceName')]",
        "IngestionClientAudioUploadedFunctionId": "[resourceId('Microsoft.Web/sites', variables('IngestionClientAudioUploadedFunctionName'))]",
        "AuthRuleAudioUploaded": "[resourceId('Microsoft.ServiceBus/namespaces/queues/authorizationRules', variables('ServiceBusName'), variables('AudioUploadedQueueName'), variables('AudioUploadedEventName'))]",
        "IngestionClientResultUploadedFunctionName": "[parameters('ResultUploadedFunctionResourceName')]",
        "IngestionClientResultUploadedFunctionId": "[resourceId('Microsoft.Web/sites', variables('IngestionClientResultUploadedFunctionName'))]",
        "AuthRuleResultUploaded": "[resourceId('Microsoft.ServiceBus/namespaces/queues/authorizationRules', variables('ServiceBusName'), variables('ResultUploadedQueueName'), variables('ResultUploadedEventName'))]",
        "AuthRuleRMK": "[resourceId('Microsoft.ServiceBus/namespaces/authorizationRules', variables('ServiceBusName'),'RootManageSharedAccessKey')]",
        "DeleteProcessedAudioFilesFromStorage": false,
        "DeleteCustomSpeechArtifacts": false,
        "TranscriptionTimeToLive": "P1D",
        "RetryLimit": 4,
        "InitialRetryDelayInMinutes": 2,
        "MaxRetryDelayInMinutes": 16,
        "AudioUploadedFunctionBinary": "https://mspublicstorage.blob.core.windows.net/ingestion-client-byos/21042022.1/ByosAudioUploaded.zip",
        "ResultUploadedFunctionBinary": "https://mspublicstorage.blob.core.windows.net/ingestion-client-byos/21042022.1/ByosResultUploaded.zip"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2019-06-01",
            "name": "[parameters('StorageResourceName')]",
            "location": "[parameters('StorageResourceRegion')]",
            "sku":
            {
                "name": "[variables('storageSkuType')]"
            },
            "kind": "[variables('storageKind')]",
            "properties": {},
            "resources": [
                {
                    "type": "Microsoft.Storage/storageAccounts/blobServices",
                    "apiVersion": "2019-06-01",
                    "location": "[parameters('StorageResourceRegion')]",
                    "name": "[concat(parameters('StorageResourceName'), '/default')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', parameters('StorageResourceName'))]"
                    ],
                    "sku":
                    {
                        "name": "[variables('storageSkuType')]"
                    },
                    "properties":
                    {
                        "cors":
                        {
                            "corsRules": []
                        },
                        "deleteRetentionPolicy":
                        {
                            "enabled": false
                        }
                    }
                },
                {
                    "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                    "apiVersion": "2019-06-01",
                    "name": "[concat(parameters('StorageResourceName'), '/default/', variables('AudioInputContainer'))]",
                    "location": "[parameters('StorageResourceRegion')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('StorageResourceName'), 'default')]",
                        "[resourceId('Microsoft.Storage/storageAccounts', parameters('StorageResourceName'))]"
                    ],
                    "properties":
                    {
                        "publicAccess": "None"
                    }
                },
                {
                    "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                    "apiVersion": "2019-06-01",
                    "name": "[concat(parameters('StorageResourceName'), '/default/', variables('AudioProcessedContainer'))]",
                    "location": "[parameters('StorageResourceRegion')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('StorageResourceName'), 'default')]",
                        "[resourceId('Microsoft.Storage/storageAccounts', parameters('StorageResourceName'))]"
                    ],
                    "properties":
                    {
                        "publicAccess": "None"
                    }
                },
                {
                    "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                    "apiVersion": "2019-06-01",
                    "name": "[concat(parameters('StorageResourceName'), '/default/', variables('AudioFailedContainer'))]",
                    "location": "[parameters('StorageResourceRegion')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('StorageResourceName'), 'default')]",
                        "[resourceId('Microsoft.Storage/storageAccounts', parameters('StorageResourceName'))]"
                    ],
                    "properties":
                    {
                        "publicAccess": "None"
                    }
                },
                {
                    "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                    "apiVersion": "2019-06-01",
                    "name": "[concat(parameters('StorageResourceName'), '/default/', variables('JsonResultOutputContainer'))]",
                    "location": "[parameters('StorageResourceRegion')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('StorageResourceName'), 'default')]",
                        "[resourceId('Microsoft.Storage/storageAccounts', parameters('StorageResourceName'))]"
                    ],
                    "properties":
                    {
                        "publicAccess": "None"
                    }
                },
                {
                    "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                    "apiVersion": "2019-06-01",
                    "name": "[concat(parameters('StorageResourceName'), '/default/', variables('ErrorReportOutputContainer'))]",
                    "location": "[parameters('StorageResourceRegion')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('StorageResourceName'), 'default')]",
                        "[resourceId('Microsoft.Storage/storageAccounts', parameters('StorageResourceName'))]"
                    ],
                    "properties":
                    {
                        "publicAccess": "None"
                    }
                },
                {
                    "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                    "apiVersion": "2019-06-01",
                    "name": "[concat(parameters('StorageResourceName'), '/default/', variables('SpeechServicesOutputContainer'))]",
                    "location": "[parameters('StorageResourceRegion')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('StorageResourceName'), 'default')]",
                        "[resourceId('Microsoft.Storage/storageAccounts', parameters('StorageResourceName'))]"
                    ],
                    "properties":
                    {
                        "publicAccess": "None"
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2017-05-10",
            "name": "grantMIAccessToStorage",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('StorageResourceName'))]"
            ],
            "properties":
            {
                "mode": "Incremental",
                "template":
                {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {},
                    "variables": {},
                    "resources": [
                        {
                            "type": "Microsoft.Storage/storageAccounts/providers/roleAssignments",
                            "apiVersion": "2018-09-01-preview",
                            "name": "[concat(parameters('StorageResourceName'), '/Microsoft.Authorization/', variables('1 - RoleAssignmentGuid'))]",
                            "properties":
                            {
                                "roleDefinitionId": "[variables(variables('builtInRoleType'))]",
                                "principalId": "[reference(concat('Microsoft.CognitiveServices/accounts/', parameters('1 - CognitiveServicesResourceName')), '2017-04-18', 'Full').identity.principalId]",
                                "principalType": "ServicePrincipal",
                                "scope": "[concat(subscription().id,'/resourcegroups/', resourceGroup().name, '/providers/Microsoft.Storage/storageAccounts/', parameters('StorageResourceName'))]"
                            }
                        },
                        {
                            "type": "Microsoft.Storage/storageAccounts/providers/roleAssignments",
                            "apiVersion": "2018-09-01-preview",
                            "name": "[concat(parameters('StorageResourceName'), '/Microsoft.Authorization/', variables('2 - RoleAssignmentGuid'))]",
                            "properties":
                            {
                                "roleDefinitionId": "[variables(variables('builtInRoleType'))]",
                                "principalId": "[reference(concat('Microsoft.CognitiveServices/accounts/', parameters('2 - CognitiveServicesResourceName')), '2017-04-18', 'Full').identity.principalId]",
                                "principalType": "ServicePrincipal",
                                "scope": "[concat(subscription().id,'/resourcegroups/', resourceGroup().name, '/providers/Microsoft.Storage/storageAccounts/', parameters('StorageResourceName'))]"
                            }
                        },
                        {
                            "type": "Microsoft.Storage/storageAccounts/providers/roleAssignments",
                            "apiVersion": "2018-09-01-preview",
                            "name": "[concat(parameters('StorageResourceName'), '/Microsoft.Authorization/', variables('3 - RoleAssignmentGuid'))]",
                            "properties":
                            {
                                "roleDefinitionId": "[variables(variables('builtInRoleType'))]",
                                "principalId": "[reference(concat('Microsoft.CognitiveServices/accounts/', parameters('3 - CognitiveServicesResourceName')), '2017-04-18', 'Full').identity.principalId]",
                                "principalType": "ServicePrincipal",
                                "scope": "[concat(subscription().id,'/resourcegroups/', resourceGroup().name, '/providers/Microsoft.Storage/storageAccounts/', parameters('StorageResourceName'))]"
                            }
                        },
                        {
                            "type": "Microsoft.Storage/storageAccounts/providers/roleAssignments",
                            "apiVersion": "2018-09-01-preview",
                            "name": "[concat(parameters('StorageResourceName'), '/Microsoft.Authorization/', variables('4 - RoleAssignmentGuid'))]",
                            "properties":
                            {
                                "roleDefinitionId": "[variables(variables('builtInRoleType'))]",
                                "principalId": "[reference(concat('Microsoft.CognitiveServices/accounts/', parameters('4 - CognitiveServicesResourceName')), '2017-04-18', 'Full').identity.principalId]",
                                "principalType": "ServicePrincipal",
                                "scope": "[concat(subscription().id,'/resourcegroups/', resourceGroup().name, '/providers/Microsoft.Storage/storageAccounts/', parameters('StorageResourceName'))]"
                            }
                        },
                        {
                            "type": "Microsoft.Storage/storageAccounts/providers/roleAssignments",
                            "apiVersion": "2018-09-01-preview",
                            "name": "[concat(parameters('StorageResourceName'), '/Microsoft.Authorization/', variables('5 - RoleAssignmentGuid'))]",
                            "properties":
                            {
                                "roleDefinitionId": "[variables(variables('builtInRoleType'))]",
                                "principalId": "[reference(concat('Microsoft.CognitiveServices/accounts/', parameters('5 - CognitiveServicesResourceName')), '2017-04-18', 'Full').identity.principalId]",
                                "principalType": "ServicePrincipal",
                                "scope": "[concat(subscription().id,'/resourcegroups/', resourceGroup().name, '/providers/Microsoft.Storage/storageAccounts/', parameters('StorageResourceName'))]"
                            }
                        }
                    ]
                },
                "parameters": {}
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2017-05-10",
            "name": "attachStorageAccount",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/', 'grantMIAccessToStorage')]"
            ],
            "properties":
            {
                "mode": "Incremental",
                "template":
                {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {},
                    "variables": {},
                    "resources": [
                        {
                            "type": "Microsoft.CognitiveServices/accounts",
                            "apiVersion": "2017-04-18",
                            "name": "[parameters('1 - CognitiveServicesResourceName')]",
                            "location": "[parameters('1 - CognitiveServicesResourceRegion')]",
                            "sku":
                            {
                                "name": "[variables('sku')]"
                            },
                            "kind": "SpeechServices",
                            "tags": "[if(contains(variables('tagValues'), 'Microsoft.CognitiveServices/accounts'), variables('tagValues')['Microsoft.CognitiveServices/accounts'], json('{}'))]",
                            "identity":
                            {
                                "tenantId": "[reference(concat('Microsoft.CognitiveServices/accounts/', parameters('1 - CognitiveServicesResourceName')), '2017-04-18', 'Full').identity.tenantId]",
                                "principalId": "[reference(concat('Microsoft.CognitiveServices/accounts/', parameters('1 - CognitiveServicesResourceName')), '2017-04-18', 'Full').identity.principalId]",
                                "type": "systemAssigned"
                            },
                            "properties": "[variables('vnetPropertiesByos')]"
                        },
                        {
                            "type": "Microsoft.CognitiveServices/accounts",
                            "apiVersion": "2017-04-18",
                            "name": "[parameters('2 - CognitiveServicesResourceName')]",
                            "location": "[parameters('2 - CognitiveServicesResourceRegion')]",
                            "sku":
                            {
                                "name": "[variables('sku')]"
                            },
                            "kind": "SpeechServices",
                            "tags": "[if(contains(variables('tagValues'), 'Microsoft.CognitiveServices/accounts'), variables('tagValues')['Microsoft.CognitiveServices/accounts'], json('{}'))]",
                            "identity":
                            {
                                "tenantId": "[reference(concat('Microsoft.CognitiveServices/accounts/', parameters('2 - CognitiveServicesResourceName')), '2017-04-18', 'Full').identity.tenantId]",
                                "principalId": "[reference(concat('Microsoft.CognitiveServices/accounts/', parameters('2 - CognitiveServicesResourceName')), '2017-04-18', 'Full').identity.principalId]",
                                "type": "systemAssigned"
                            },
                            "properties": "[variables('vnetPropertiesByos')]"
                        },
                        {
                            "type": "Microsoft.CognitiveServices/accounts",
                            "apiVersion": "2017-04-18",
                            "name": "[parameters('3 - CognitiveServicesResourceName')]",
                            "location": "[parameters('3 - CognitiveServicesResourceRegion')]",
                            "sku":
                            {
                                "name": "[variables('sku')]"
                            },
                            "kind": "SpeechServices",
                            "tags": "[if(contains(variables('tagValues'), 'Microsoft.CognitiveServices/accounts'), variables('tagValues')['Microsoft.CognitiveServices/accounts'], json('{}'))]",
                            "identity":
                            {
                                "tenantId": "[reference(concat('Microsoft.CognitiveServices/accounts/', parameters('3 - CognitiveServicesResourceName')), '2017-04-18', 'Full').identity.tenantId]",
                                "principalId": "[reference(concat('Microsoft.CognitiveServices/accounts/', parameters('3 - CognitiveServicesResourceName')), '2017-04-18', 'Full').identity.principalId]",
                                "type": "systemAssigned"
                            },
                            "properties": "[variables('vnetPropertiesByos')]"
                        },
                        {
                            "type": "Microsoft.CognitiveServices/accounts",
                            "apiVersion": "2017-04-18",
                            "name": "[parameters('4 - CognitiveServicesResourceName')]",
                            "location": "[parameters('4 - CognitiveServicesResourceRegion')]",
                            "sku":
                            {
                                "name": "[variables('sku')]"
                            },
                            "kind": "SpeechServices",
                            "tags": "[if(contains(variables('tagValues'), 'Microsoft.CognitiveServices/accounts'), variables('tagValues')['Microsoft.CognitiveServices/accounts'], json('{}'))]",
                            "identity":
                            {
                                "tenantId": "[reference(concat('Microsoft.CognitiveServices/accounts/', parameters('4 - CognitiveServicesResourceName')), '2017-04-18', 'Full').identity.tenantId]",
                                "principalId": "[reference(concat('Microsoft.CognitiveServices/accounts/', parameters('4 - CognitiveServicesResourceName')), '2017-04-18', 'Full').identity.principalId]",
                                "type": "systemAssigned"
                            },
                            "properties": "[variables('vnetPropertiesByos')]"
                        },
                        {
                            "type": "Microsoft.CognitiveServices/accounts",
                            "apiVersion": "2017-04-18",
                            "name": "[parameters('5 - CognitiveServicesResourceName')]",
                            "location": "[parameters('5 - CognitiveServicesResourceRegion')]",
                            "sku":
                            {
                                "name": "[variables('sku')]"
                            },
                            "kind": "SpeechServices",
                            "tags": "[if(contains(variables('tagValues'), 'Microsoft.CognitiveServices/accounts'), variables('tagValues')['Microsoft.CognitiveServices/accounts'], json('{}'))]",
                            "identity":
                            {
                                "tenantId": "[reference(concat('Microsoft.CognitiveServices/accounts/', parameters('5 - CognitiveServicesResourceName')), '2017-04-18', 'Full').identity.tenantId]",
                                "principalId": "[reference(concat('Microsoft.CognitiveServices/accounts/', parameters('5 - CognitiveServicesResourceName')), '2017-04-18', 'Full').identity.principalId]",
                                "type": "systemAssigned"
                            },
                            "properties": "[variables('vnetPropertiesByos')]"
                        }
                    ]
                },
                "parameters": {}
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2017-05-10",
            "name": "setWebAppSettings",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/', 'attachStorageAccount')]",
                "[resourceId('Microsoft.Insights/components', variables('AppInsightsName'))]",
                "[concat('Microsoft.Web/sites/', variables('IngestionClientAudioUploadedFunctionName'))]",
                "[concat('Microsoft.Web/sites/', variables('IngestionClientResultUploadedFunctionName'))]",
                "[resourceId('Microsoft.KeyVault/vaults', variables('KeyVaultName'))]",
                "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('KeyVaultName'), variables('CognitiveServicesKeysSecretName'))]",
                "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('KeyVaultName'), variables('ClientIdSecretName'))]",
                "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('KeyVaultName'), variables('ClientSecretSecretName'))]",
                "[variables('AuthRuleRMK')]",
                "[variables('AuthRuleAudioUploaded')]"
            ],
            "properties":
            {
                "mode": "Incremental",
                "template":
                {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {},
                    "variables": {},
                    "resources": [
                        {
                            "type": "Microsoft.Web/sites/config",
                            "name": "[concat(variables('IngestionClientAudioUploadedFunctionName'), '/AppSettings')]",
                            "apiVersion": "2020-09-01",
                            "location": "[variables('IngestionClientRegion')]",
                            "tags":
                            {
                                "displayName": "WebAppSettings"
                            },
                            "properties":
                            {
                                "APPLICATIONINSIGHTS_CONNECTION_STRING": "[reference(resourceId('Microsoft.Insights/components', variables('AppInsightsName')), '2020-02-02-preview').ConnectionString]",
                                "FUNCTIONS_EXTENSION_VERSION": "~3",
                                "FUNCTIONS_WORKER_RUNTIME": "dotnet",
                                "WEBSITE_RUN_FROM_PACKAGE": "[variables('AudioUploadedFunctionBinary')]",
                                "AzureServiceBus": "[listKeys(variables('AuthRuleRMK'),'2015-08-01').primaryConnectionString]",
                                "AzureWebJobsStorage": "[concat('DefaultEndpointsProtocol=https;AccountName=', parameters('StorageResourceName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('StorageResourceName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value, ';EndpointSuffix=core.windows.net')]",
                                "AzureWebJobsDashboard": "[concat('DefaultEndpointsProtocol=https;AccountName=', parameters('StorageResourceName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('StorageResourceName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value, ';EndpointSuffix=core.windows.net')]",
                                "CognitiveServicesKeys": "[concat('@Microsoft.KeyVault(VaultName=', variables('KeyVaultName'), ';SecretName=', variables('CognitiveServicesKeysSecretName'), ')')]",
                                "CognitiveServicesRegions": "[concat(parameters('1 - CognitiveServicesResourceRegion'), ';', parameters('2 - CognitiveServicesResourceRegion'), ';', parameters('3 - CognitiveServicesResourceRegion'), ';', parameters('4 - CognitiveServicesResourceRegion'), ';', parameters('5 - CognitiveServicesResourceRegion'))]",
                                "ClientId": "[concat('@Microsoft.KeyVault(VaultName=', variables('KeyVaultName'), ';SecretName=', variables('ClientIdSecretName'), ')')]",
                                "ClientSecret": "[concat('@Microsoft.KeyVault(VaultName=', variables('KeyVaultName'), ';SecretName=', variables('ClientSecretSecretName'), ')')]",
                                "TokenEndpointUrl": "[parameters('TokenEndpointUrl')]",
                                "Scope": "[parameters('Scope')]",
                                "CallbackBaseUrl": "[parameters('CallbackBaseUrl')]",
                                "CustomModelIds": "[concat(parameters('1 - CognitiveServicesModelId'), ';', parameters('2 - CognitiveServicesModelId'), ';', parameters('3 - CognitiveServicesModelId'), ';', parameters('4 - CognitiveServicesModelId'), ';', parameters('5 - CognitiveServicesModelId'))]",
                                "RequestPercentages": "[concat(parameters('1 - CognitiveServicesRequestPercentage'), ';', parameters('2 - CognitiveServicesRequestPercentage'), ';', parameters('3 - CognitiveServicesRequestPercentage'), ';', parameters('4 - CognitiveServicesRequestPercentage'), ';', parameters('5 - CognitiveServicesRequestPercentage'))]",
                                "AddDiarization": "[parameters('AddDiarization')]",
                                "AddWordLevelTimestamps": "[parameters('AddWordLevelTimestamps')]",
                                "CustomProperties": "[variables('CustomProperties')]",
                                "DeleteProcessedAudioFilesFromStorage": "[variables('DeleteProcessedAudioFilesFromStorage')]",
                                "ProfanityFilterMode": "[parameters('ProfanityFilterMode')]",
                                "PunctuationMode": "[parameters('PunctuationMode')]",
                                "TranscriptionTimeToLive": "[variables('TranscriptionTimeToLive')]",
                                "AudioInputContainer": "[variables('AudioInputContainer')]",
                                "AudioFailedContainer": "[variables('AudioFailedContainer')]",
                                "ErrorReportOutputContainer": "[variables('ErrorReportOutputContainer')]",
                                "InitialRetryDelayInMinutes": "[variables('InitialRetryDelayInMinutes')]",
                                "MaxRetryDelayInMinutes": "[variables('MaxRetryDelayInMinutes')]",
                                "Locale": "[parameters('TranscriptionLocale')]",
                                "RetryLimit": "[variables('RetryLimit')]",
                                "AudioUploadedServiceBusConnectionString": "[listKeys(variables('AuthRuleAudioUploaded'),'2015-08-01').primaryConnectionString]"
                            }
                        },
                        {
                            "type": "Microsoft.Web/sites/config",
                            "name": "[concat(variables('IngestionClientResultUploadedFunctionName'), '/AppSettings')]",
                            "apiVersion": "2020-09-01",
                            "location": "[resourceGroup().location]",
                            "tags":
                            {
                                "displayName": "WebAppSettings"
                            },
                            "properties":
                            {
                                "APPLICATIONINSIGHTS_CONNECTION_STRING": "[reference(resourceId('Microsoft.Insights/components', variables('AppInsightsName')), '2020-02-02-preview').ConnectionString]",
                                "FUNCTIONS_EXTENSION_VERSION": "~3",
                                "FUNCTIONS_WORKER_RUNTIME": "dotnet",
                                "WEBSITE_RUN_FROM_PACKAGE": "[variables('ResultUploadedFunctionBinary')]",
                                "AzureServiceBus": "[listKeys(variables('AuthRuleRMK'),'2015-08-01').primaryConnectionString]",
                                "AzureWebJobsStorage": "[concat('DefaultEndpointsProtocol=https;AccountName=', parameters('StorageResourceName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('StorageResourceName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value, ';EndpointSuffix=core.windows.net')]",
                                "AzureWebJobsDashboard": "[concat('DefaultEndpointsProtocol=https;AccountName=', parameters('StorageResourceName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('StorageResourceName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value, ';EndpointSuffix=core.windows.net')]",
                                "ClientId": "[concat('@Microsoft.KeyVault(VaultName=', variables('KeyVaultName'), ';SecretName=', variables('ClientIdSecretName'), ')')]",
                                "ClientSecret": "[concat('@Microsoft.KeyVault(VaultName=', variables('KeyVaultName'), ';SecretName=', variables('ClientSecretSecretName'), ')')]",
                                "TokenEndpointUrl": "[parameters('TokenEndpointUrl')]",
                                "Scope": "[parameters('Scope')]",
                                "CallbackBaseUrl": "[parameters('CallbackBaseUrl')]",
                                "AudioInputContainer": "[variables('AudioInputContainer')]",
                                "AudioFailedContainer": "[variables('AudioFailedContainer')]",
                                "AudioProcessedContainer": "[variables('AudioProcessedContainer')]",
                                "DeleteProcessedAudioFilesFromStorage": "[variables('DeleteProcessedAudioFilesFromStorage')]",
                                "DeleteCustomSpeechArtifacts": "[variables('DeleteCustomSpeechArtifacts')]",
                                "ErrorReportOutputContainer": "[variables('ErrorReportOutputContainer')]",
                                "JsonResultOutputContainer": "[variables('JsonResultOutputContainer')]",
                                "SpeechServicesOutputContainer": "[variables('SpeechServicesOutputContainer')]",
                                "AudioUploadedServiceBusConnectionString": "[listKeys(variables('AuthRuleAudioUploaded'),'2015-08-01').primaryConnectionString]"
                            }
                        }
                    ]
                }
            },
            "resourceGroup": "[resourceGroup().name]"
        },
        {
            "type": "Microsoft.CognitiveServices/accounts",
            "apiVersion": "2017-04-18",
            "name": "[parameters('1 - CognitiveServicesResourceName')]",
            "location": "[parameters('1 - CognitiveServicesResourceRegion')]",
            "tags": "[if(contains(variables('tagValues'), 'Microsoft.CognitiveServices/accounts'), variables('tagValues')['Microsoft.CognitiveServices/accounts'], json('{}'))]",
            "sku":
            {
                "name": "[variables('sku')]"
            },
            "kind": "SpeechServices",
            "identity":
            {
                "type": "systemAssigned"
            },
            "properties": "[variables('vnetProperties')]"
        },
        {
            "type": "Microsoft.CognitiveServices/accounts",
            "apiVersion": "2017-04-18",
            "name": "[parameters('2 - CognitiveServicesResourceName')]",
            "location": "[parameters('2 - CognitiveServicesResourceRegion')]",
            "tags": "[if(contains(variables('tagValues'), 'Microsoft.CognitiveServices/accounts'), variables('tagValues')['Microsoft.CognitiveServices/accounts'], json('{}'))]",
            "sku":
            {
                "name": "[variables('sku')]"
            },
            "kind": "SpeechServices",
            "identity":
            {
                "type": "systemAssigned"
            },
            "properties": "[variables('vnetProperties')]"
        },
        {
            "type": "Microsoft.CognitiveServices/accounts",
            "apiVersion": "2017-04-18",
            "name": "[parameters('3 - CognitiveServicesResourceName')]",
            "location": "[parameters('3 - CognitiveServicesResourceRegion')]",
            "tags": "[if(contains(variables('tagValues'), 'Microsoft.CognitiveServices/accounts'), variables('tagValues')['Microsoft.CognitiveServices/accounts'], json('{}'))]",
            "sku":
            {
                "name": "[variables('sku')]"
            },
            "kind": "SpeechServices",
            "identity":
            {
                "type": "systemAssigned"
            },
            "properties": "[variables('vnetProperties')]"
        },
        {
            "type": "Microsoft.CognitiveServices/accounts",
            "apiVersion": "2017-04-18",
            "name": "[parameters('4 - CognitiveServicesResourceName')]",
            "location": "[parameters('4 - CognitiveServicesResourceRegion')]",
            "tags": "[if(contains(variables('tagValues'), 'Microsoft.CognitiveServices/accounts'), variables('tagValues')['Microsoft.CognitiveServices/accounts'], json('{}'))]",
            "sku":
            {
                "name": "[variables('sku')]"
            },
            "kind": "SpeechServices",
            "identity":
            {
                "type": "systemAssigned"
            },
            "properties": "[variables('vnetProperties')]"
        },
        {
            "type": "Microsoft.CognitiveServices/accounts",
            "apiVersion": "2017-04-18",
            "name": "[parameters('5 - CognitiveServicesResourceName')]",
            "location": "[parameters('5 - CognitiveServicesResourceRegion')]",
            "tags": "[if(contains(variables('tagValues'), 'Microsoft.CognitiveServices/accounts'), variables('tagValues')['Microsoft.CognitiveServices/accounts'], json('{}'))]",
            "sku":
            {
                "name": "[variables('sku')]"
            },
            "kind": "SpeechServices",
            "identity":
            {
                "type": "systemAssigned"
            },
            "properties": "[variables('vnetProperties')]"
        },
        {
            "type": "Microsoft.Insights/components",
            "apiVersion": "2020-02-02-preview",
            "name": "[variables('AppInsightsName')]",
            "location": "[variables('IngestionClientRegion')]",
            "tags":
            {
                "applicationType": "web",
                "applicationName": "TranscriptionInsights"
            },
            "kind": "web",
            "properties":
            {
                "Application_Type": "web"
            }
        },
        {
            "type": "Microsoft.ServiceBus/namespaces",
            "apiVersion": "2018-01-01-preview",
            "name": "[variables('ServiceBusName')]",
            "location": "[variables('IngestionClientRegion')]",
            "sku":
            {
                "name": "Standard",
                "tier": "Standard"
            },
            "properties":
            {
                "zoneRedundant": false
            }
        },
        {
            "type": "Microsoft.ServiceBus/namespaces/AuthorizationRules",
            "apiVersion": "2017-04-01",
            "name": "[concat(variables('ServiceBusName'), '/RootManageSharedAccessKey')]",
            "location": "[variables('IngestionClientRegion')]",
            "dependsOn": [
                "[resourceId('Microsoft.ServiceBus/namespaces', variables('ServiceBusName'))]"
            ],
            "properties":
            {
                "rights": [
                    "Listen",
                    "Manage",
                    "Send"
                ]
            }
        },
        {
            "type": "Microsoft.ServiceBus/namespaces/queues",
            "apiVersion": "2017-04-01",
            "name": "[concat(variables('ServiceBusName'), '/', variables('AudioUploadedQueueName'))]",
            "location": "[variables('IngestionClientRegion')]",
            "dependsOn": [
                "[resourceId('Microsoft.ServiceBus/namespaces', variables('ServiceBusName'))]"
            ],
            "properties":
            {
                "lockDuration": "PT4M",
                "maxSizeInMegabytes": 5120,
                "requiresDuplicateDetection": false,
                "requiresSession": false,
                "defaultMessageTimeToLive": "P10675199DT2H48M5.4775807S",
                "deadLetteringOnMessageExpiration": false,
                "enableBatchedOperations": false,
                "duplicateDetectionHistoryTimeWindow": "PT10M",
                "maxDeliveryCount": 1,
                "status": "Active",
                "autoDeleteOnIdle": "P10675199DT2H48M5.4775807S",
                "enablePartitioning": false,
                "enableExpress": false
            }
        },
        {
            "type": "Microsoft.ServiceBus/namespaces/queues/authorizationRules",
            "apiVersion": "2017-04-01",
            "name": "[concat(variables('ServiceBusName'), '/', variables('AudioUploadedQueueName'), '/', variables('AudioUploadedEventName'))]",
            "location": "[variables('IngestionClientRegion')]",
            "dependsOn": [
                "[resourceId('Microsoft.ServiceBus/namespaces/queues', variables('ServiceBusName'), variables('AudioUploadedQueueName'))]",
                "[resourceId('Microsoft.ServiceBus/namespaces', variables('ServiceBusName'))]"
            ],
            "properties":
            {
                "rights": [
                    "Listen",
                    "Send"
                ]
            }
        },
        {
            "type": "Microsoft.ServiceBus/namespaces/queues",
            "apiVersion": "2017-04-01",
            "name": "[concat(variables('ServiceBusName'), '/', variables('ResultUploadedQueueName'))]",
            "location": "[variables('IngestionClientRegion')]",
            "dependsOn": [
                "[resourceId('Microsoft.ServiceBus/namespaces', variables('ServiceBusName'))]"
            ],
            "properties":
            {
                "lockDuration": "PT4M",
                "maxSizeInMegabytes": 5120,
                "requiresDuplicateDetection": false,
                "requiresSession": false,
                "defaultMessageTimeToLive": "P10675199DT2H48M5.4775807S",
                "deadLetteringOnMessageExpiration": false,
                "enableBatchedOperations": false,
                "duplicateDetectionHistoryTimeWindow": "PT10M",
                "maxDeliveryCount": 1,
                "status": "Active",
                "autoDeleteOnIdle": "P10675199DT2H48M5.4775807S",
                "enablePartitioning": false,
                "enableExpress": false
            }
        },
        {
            "type": "Microsoft.ServiceBus/namespaces/queues/authorizationRules",
            "apiVersion": "2017-04-01",
            "name": "[concat(variables('ServiceBusName'), '/', variables('ResultUploadedQueueName'), '/', variables('ResultUploadedEventName'))]",
            "location": "[variables('IngestionClientRegion')]",
            "dependsOn": [
                "[resourceId('Microsoft.ServiceBus/namespaces/queues', variables('ServiceBusName'), 'result_uploaded_queue')]",
                "[resourceId('Microsoft.ServiceBus/namespaces', variables('ServiceBusName'))]"
            ],
            "properties":
            {
                "rights": [
                    "Listen",
                    "Send"
                ]
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults",
            "name": "[variables('KeyVaultName')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('IngestionClientRegion')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', variables('IngestionClientAudioUploadedFunctionName'))]",
                "[resourceId('Microsoft.Web/sites', variables('IngestionClientResultUploadedFunctionName'))]"
            ],
            "properties":
            {
                "enabledForDeployment": "true",
                "enabledForDiskEncryption": "false",
                "enabledForTemplateDeployment": "false",
                "tenantId": "[subscription().tenantId]",
                "accessPolicies": [
                    {
                        "objectId": "[reference(resourceId('Microsoft.Web/sites', variables('IngestionClientAudioUploadedFunctionName')), '2019-08-01', 'full').identity.principalId]",
                        "tenantId": "[reference(resourceId('Microsoft.Web/sites', variables('IngestionClientAudioUploadedFunctionName')), '2019-08-01', 'full').identity.tenantId]",
                        "permissions":
                        {
                            "secrets": [
                                "get",
                                "list"
                            ]
                        }
                    },
                    {
                        "objectId": "[reference(resourceId('Microsoft.Web/sites', variables('IngestionClientResultUploadedFunctionName')), '2019-08-01', 'full').identity.principalId]",
                        "tenantId": "[reference(resourceId('Microsoft.Web/sites', variables('IngestionClientResultUploadedFunctionName')), '2019-08-01', 'full').identity.tenantId]",
                        "permissions":
                        {
                            "secrets": [
                                "get",
                                "list"
                            ]
                        }
                    }
                ],
                "sku":
                {
                    "name": "Standard",
                    "family": "A"
                },
                "networkAcls":
                {
                    "defaultAction": "Allow",
                    "bypass": "AzureServices"
                }
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('KeyVaultName'), '/', variables('CognitiveServicesKeysSecretName'))]",
            "apiVersion": "2019-09-01",
            "location": "[variables('IngestionClientRegion')]",
            "dependsOn": [
                "[concat('Microsoft.KeyVault/vaults/', variables('KeyVaultName'))]",
                "[concat('Microsoft.CognitiveServices/accounts/', parameters('1 - CognitiveServicesResourceName'))]",
                "[concat('Microsoft.CognitiveServices/accounts/', parameters('2 - CognitiveServicesResourceName'))]",
                "[concat('Microsoft.CognitiveServices/accounts/', parameters('3 - CognitiveServicesResourceName'))]",
                "[concat('Microsoft.CognitiveServices/accounts/', parameters('4 - CognitiveServicesResourceName'))]",
                "[concat('Microsoft.CognitiveServices/accounts/', parameters('5 - CognitiveServicesResourceName'))]"
            ],
            "properties":
            {
                "value": "[concat(listKeys(concat(resourceGroup().id,'/providers/','Microsoft.CognitiveServices/accounts/', parameters('1 - CognitiveServicesResourceName')), '2017-04-18').key1, ';', listKeys(concat(resourceGroup().id,'/providers/','Microsoft.CognitiveServices/accounts/', parameters('2 - CognitiveServicesResourceName')), '2017-04-18').key1, ';', listKeys(concat(resourceGroup().id,'/providers/','Microsoft.CognitiveServices/accounts/', parameters('3 - CognitiveServicesResourceName')), '2017-04-18').key1, ';', listKeys(concat(resourceGroup().id,'/providers/','Microsoft.CognitiveServices/accounts/', parameters('4 - CognitiveServicesResourceName')), '2017-04-18').key1, ';', listKeys(concat(resourceGroup().id,'/providers/','Microsoft.CognitiveServices/accounts/', parameters('5 - CognitiveServicesResourceName')), '2017-04-18').key1)]"
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('KeyVaultName'), '/', variables('ClientIdSecretName'))]",
            "apiVersion": "2019-09-01",
            "location": "[variables('IngestionClientRegion')]",
            "dependsOn": [
                "[concat('Microsoft.KeyVault/vaults/', variables('KeyVaultName'))]"
            ],
            "properties":
            {
                "value": "[parameters('ClientId')]"
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('KeyVaultName'), '/', variables('ClientSecretSecretName'))]",
            "apiVersion": "2019-09-01",
            "location": "[variables('IngestionClientRegion')]",
            "dependsOn": [
                "[concat('Microsoft.KeyVault/vaults/', variables('KeyVaultName'))]"
            ],
            "properties":
            {
                "value": "[parameters('ClientSecret')]"
            }
        },
        {
            "name": "[variables('EventGridSystemTopicName')]",
            "type": "Microsoft.EventGrid/systemTopics",
            "apiVersion": "2020-04-01-preview",
            "location": "[parameters('StorageResourceRegion')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('StorageResourceName'))]"
            ],
            "properties":
            {
                "source": "[resourceId('Microsoft.Storage/storageAccounts', parameters('StorageResourceName'))]",
                "topicType": "Microsoft.Storage.StorageAccounts"
            }
        },
        {
            "type": "Microsoft.EventGrid/systemTopics/eventSubscriptions",
            "apiVersion": "2020-04-01-preview",
            "name": "[concat(variables('EventGridSystemTopicName'), '/', variables('AudioUploadedEventName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.EventGrid/systemTopics', variables('EventGridSystemTopicName'))]",
                "[resourceId('Microsoft.ServiceBus/namespaces/queues', variables('ServiceBusName'), variables('AudioUploadedQueueName'))]"
            ],
            "properties":
            {
                "destination":
                {
                    "endpointType": "ServiceBusQueue",
                    "properties":
                    {
                        "resourceId": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.ServiceBus/namespaces/', variables('ServiceBusName'),'/queues/', variables('AudioUploadedQueueName'))]"
                    }
                },
                "filter":
                {
                    "includedEventTypes": [
                        "Microsoft.Storage.BlobCreated"
                    ],
                    "advancedFilters": [
                        {
                            "operatorType": "StringBeginsWith",
                            "key": "Subject",
                            "values": [
                                "[concat('/blobServices/default/containers/', variables('AudioInputContainer'), '/blobs')]"
                            ]
                        },
                        {
                            "operatorType": "StringContains",
                            "key": "data.api",
                            "values": [
                                "FlushWithClose",
                                "PutBlob",
                                "PutBlockList",
                                "CopyBlob"
                            ]
                        }
                    ]
                },
                "labels": [],
                "eventDeliverySchema": "EventGridSchema"
            }
        },
        {
            "type": "Microsoft.EventGrid/systemTopics/eventSubscriptions",
            "apiVersion": "2020-04-01-preview",
            "name": "[concat(variables('EventGridSystemTopicName'), '/', variables('ResultUploadedEventName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.EventGrid/systemTopics', variables('EventGridSystemTopicName'))]",
                "[resourceId('Microsoft.ServiceBus/namespaces/queues', variables('ServiceBusName'), variables('ResultUploadedQueueName'))]"
            ],
            "properties":
            {
                "destination":
                {
                    "endpointType": "ServiceBusQueue",
                    "properties":
                    {
                        "resourceId": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.ServiceBus/namespaces/', variables('ServiceBusName'),'/queues/', variables('ResultUploadedQueueName'))]"
                    }
                },
                "filter":
                {
                    "includedEventTypes": [
                        "Microsoft.Storage.BlobCreated"
                    ],
                    "advancedFilters": [
                        {
                            "operatorType": "StringBeginsWith",
                            "key": "Subject",
                            "values": [
                                "[concat('/blobServices/default/containers/', variables('SpeechServicesOutputContainer'), '/blobs')]"
                            ]
                        },
                        {
                            "operatorType": "StringContains",
                            "key": "data.api",
                            "values": [
                                "FlushWithClose",
                                "PutBlob",
                                "PutBlockList",
                                "CopyBlob"
                            ]
                        }
                    ]
                },
                "labels": [],
                "eventDeliverySchema": "EventGridSchema"
            }
        },
        {
            "apiVersion": "2018-02-01",
            "type": "Microsoft.Web/serverfarms",
            "kind": "app",
            "name": "[variables('AppServicePlanName')]",
            "location": "[variables('IngestionClientRegion')]",
            "properties": {},
            "dependsOn": [],
            "sku":
            {
                "name": "EP1"
            }
        },
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2020-09-01",
            "name": "[variables('IngestionClientAudioUploadedFunctionName')]",
            "location": "[variables('IngestionClientRegion')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('AppServicePlanName'))]"
            ],
            "kind": "functionapp",
            "properties":
            {
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('AppServicePlanName'))]",
                "httpsOnly": "true",
                "siteConfig":
                {
                    "use32BitWorkerProcess": false
                }
            },
            "identity":
            {
                "type": "SystemAssigned"
            }
        },
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2020-09-01",
            "name": "[variables('IngestionClientResultUploadedFunctionName')]",
            "location": "[variables('IngestionClientRegion')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('AppServicePlanName'))]"
            ],
            "kind": "functionapp",
            "properties":
            {
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('AppServicePlanName'))]",
                "httpsOnly": "true",
                "siteConfig":
                {
                    "use32BitWorkerProcess": false
                }
            },
            "identity":
            {
                "type": "SystemAssigned"
            }
        }
    ]
}
